* 25/02/2025

COLETAR OS DADOS DAS VENDAS E INFORMAÇÕES DOS FUNCIONÁRIOS E GRAVAR NO BANCO DE DADOS NOSQL - MONGO DB

- CÓDIGO PARA COLETAR E GRAVAR AS VENDAS:

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
from pymongo import MongoClient


# Função para salvar dados no MongoDB
def salvar_no_banco(dados_venda):
    try:
        # Conexão com o MongoDB
        client = MongoClient("mongodb://localhost:27017/")  # Conexão local
        db = client['vendas']  # Banco de dados 'vendas' (será criado se não existir)
        colecao = db['registros_vendas']  # Coleção 'registros_vendas' (será criada se não existir)

        # Inserir os dados
        colecao.insert_one(dados_venda)
        messagebox.showinfo("Sucesso", "Dados salvos com sucesso no banco de dados!")
    except Exception as e:
        messagebox.showerror("Erro", f"Erro ao salvar no banco de dados: {e}")


# Função para exibir os dados inseridos e salvar no banco de dados
def exibir_dados():
    try:
        data_hora_venda = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        descricao = descricao_entry.get()
        quantidade = quantidade_entry.get()
        valor_venda = valor_venda_entry.get()
        metodo_pagamento = metodo_pagamento_combobox.get()
        unidade = unidade_entry.get()
        valor_custo = valor_custo_entry.get()
        grupo_produto = grupo_produto_entry.get()
        fornecedor = fornecedor_entry.get()
        nome_funcionario = nome_funcionario_entry.get()
        loja = loja_entry.get()
        status_venda = status_venda_combobox.get()

        # Validar se os campos obrigatórios estão preenchidos
        if not descricao or not quantidade or not valor_venda:
            messagebox.showerror("Erro", "Os campos Descrição, Quantidade e Valor de Venda são obrigatórios.")
            return

        # Criando o dicionário de dados para ser salvo no MongoDB
        dados_venda = {
            "data_hora_venda": data_hora_venda,
            "descricao": descricao,
            "quantidade": quantidade,
            "valor_venda": valor_venda,
            "metodo_pagamento": metodo_pagamento,
            "unidade": unidade,
            "valor_custo": valor_custo,
            "grupo_produto": grupo_produto,
            "fornecedor": fornecedor,
            "nome_funcionario": nome_funcionario,
            "loja": loja,
            "status_venda": status_venda
        }

        # Salvar dados no banco de dados
        salvar_no_banco(dados_venda)

        # Exibir os dados na tela
        dados_venda_texto = f""" "VENDA REALIZADA"\n
        Data e Hora da Venda: {data_hora_venda}\n
        Descrição: {descricao}
        Quantidade: {quantidade}
        Valor de Venda: {valor_venda}
        Método de Pagamento: {metodo_pagamento}
        Unidade: {unidade}
        Valor de Custo: {valor_custo}
        Grupo do Produto: {grupo_produto}
        Fornecedor: {fornecedor}
        Nome do Funcionário: {nome_funcionario}
        Loja: {loja}
        Status da Venda: {status_venda}
        """

        messagebox.showinfo("Dados da Venda", dados_venda_texto)
        limpar_campos()

    except Exception as e:
        messagebox.showerror("Erro", f"Ocorreu um erro ao exibir os dados: {e}")


# Função para limpar os campos após o registro
def limpar_campos():
    descricao_entry.delete(0, tk.END)
    quantidade_entry.delete(0, tk.END)
    valor_venda_entry.delete(0, tk.END)
    metodo_pagamento_combobox.set("")
    unidade_entry.delete(0, tk.END)
    valor_custo_entry.delete(0, tk.END)
    grupo_produto_entry.delete(0, tk.END)
    fornecedor_entry.delete(0, tk.END)
    nome_funcionario_entry.delete(0, tk.END)
    loja_entry.delete(0, tk.END)
    status_venda_combobox.set("")


# Criando a interface gráfica
try:
    root = tk.Tk()

    # Adiciona uma linha em branco antes do título
    tk.Label(root, text="").pack()  # Linha em branco

    root.title("Auto Posto Trevão - Registro das Vendas")
    root.geometry("400x650")

    # Labels e Campos de Entrada
    tk.Label(root, text="Descrição do Item:").pack()
    descricao_entry = tk.Entry(root)
    descricao_entry.pack()

    tk.Label(root, text="Quantidade:").pack()
    quantidade_entry = tk.Entry(root)
    quantidade_entry.pack()

    tk.Label(root, text="Valor de Venda:").pack()
    valor_venda_entry = tk.Entry(root)
    valor_venda_entry.pack()

    tk.Label(root, text="Método de Pagamento:").pack()
    metodo_pagamento_combobox = ttk.Combobox(root, values=["Dinheiro", "Crédito", "Débito", "Pix"])
    metodo_pagamento_combobox.pack()

    tk.Label(root, text="Unidade do Item:").pack()
    unidade_entry = tk.Entry(root)
    unidade_entry.pack()

    tk.Label(root, text="Valor de Custo:").pack()
    valor_custo_entry = tk.Entry(root)
    valor_custo_entry.pack()

    tk.Label(root, text="Grupo do Produto:").pack()
    grupo_produto_entry = tk.Entry(root)
    grupo_produto_entry.pack()

    tk.Label(root, text="Fornecedor:").pack()
    fornecedor_entry = tk.Entry(root)
    fornecedor_entry.pack()

    tk.Label(root, text="Nome do Funcionário:").pack()
    nome_funcionario_entry = tk.Entry(root)
    nome_funcionario_entry.pack()

    tk.Label(root, text="Loja da Venda:").pack()
    loja_entry = tk.Entry(root)
    loja_entry.pack()

    tk.Label(root, text="Status da Venda:").pack()
    status_venda_combobox = ttk.Combobox(root, values=["Finalizada", "Cancelada", "Pendente"])
    status_venda_combobox.pack()

    # Adiciona duas linhas em branco
    tk.Label(root, text="").pack()  # Primeira linha em branco

    # Botão de Salvar dados
    tk.Button(root, text="Salvar Venda", command=exibir_dados).pack()

    # Inicia o loop principal da interface gráfica
    root.mainloop()

except Exception as e:
    print(f"Ocorreu um erro ao iniciar a interface gráfica: {e}")

- LEITURA DO BANCO DE DADOS DE VENDAS:

from pymongo import MongoClient

# Conectar ao MongoDB
client = MongoClient("mongodb://localhost:27017/")  # Conexão local

# Acessar o banco de dados 'vendas' e a coleção 'registros_vendas'
db = client['vendas']
colecao = db['registros_vendas']

# Encontrar todos os registros da coleção
registros = colecao.find()

# Exibir os dados encontrados
for registro in registros:
    print(registro)

- CÓDIGO PARA COLETAR E GRAVAR OS FUNCIONÁRIOS:

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
from pymongo import MongoClient

# Conectar ao MongoDB
client = MongoClient("mongodb://localhost:27017/")
db = client['empresa']  # Nome do banco de dados
funcionarios_collection = db['funcionarios']  # Nome da coleção de funcionários

# Função para salvar os dados no banco de dados
def salvar_dados_funcionario():
    try:
        cpf = cpf_entry.get()
        nome = nome_entry.get()
        data_nascimento = data_nascimento_entry.get()
        logradouro = logradouro_entry.get()
        bairro = bairro_entry.get()
        cidade = cidade_entry.get()
        estado = estado_entry.get()
        cep = cep_entry.get()
        departamento_setor = departamento_setor_entry.get()
        telefone_contato = telefone_contato_entry.get()
        email = email_entry.get()
        salario = float(salario_entry.get())  # Convertendo para float
        beneficios = beneficios_entry.get().split(",")  # Separar benefícios por vírgula
        cargo = cargo_entry.get()
        status_funcionario = status_funcionario_combobox.get()

        # Validar se os campos obrigatórios estão preenchidos
        if not cpf or not nome or not departamento_setor or not telefone_contato:
            messagebox.showerror("Erro", "Campos obrigatórios não preenchidos!")
            return

        # Criando o dicionário de dados para ser salvo no MongoDB
        funcionario = {
            "cpf": cpf,
            "nome": nome,
            "data_nascimento": data_nascimento,
            "endereco": {
                "logradouro": logradouro,
                "bairro": bairro,
                "cidade": cidade,
                "estado": estado,
                "cep": cep
            },
            "departamento_setor": departamento_setor,
            "telefone_contato": telefone_contato,
            "email": email,
            "salario": salario,
            "beneficios": beneficios,
            "cargo": cargo,
            "status_funcionario": status_funcionario
        }

        # Inserir o documento na coleção 'funcionarios'
        funcionarios_collection.insert_one(funcionario)

        # Exibir mensagem de sucesso
        messagebox.showinfo("Sucesso", "Dados do funcionário salvos com sucesso!")
        limpar_campos()  # Limpar campos após salvar os dados

    except Exception as e:
        messagebox.showerror("Erro", f"Ocorreu um erro ao salvar os dados: {e}")

# Função para limpar os campos após o registro
def limpar_campos():
    cpf_entry.delete(0, tk.END)
    nome_entry.delete(0, tk.END)
    data_nascimento_entry.delete(0, tk.END)
    logradouro_entry.delete(0, tk.END)
    bairro_entry.delete(0, tk.END)
    cidade_entry.delete(0, tk.END)
    estado_entry.delete(0, tk.END)
    cep_entry.delete(0, tk.END)
    departamento_setor_entry.delete(0, tk.END)
    telefone_contato_entry.delete(0, tk.END)
    email_entry.delete(0, tk.END)
    salario_entry.delete(0, tk.END)
    beneficios_entry.delete(0, tk.END)
    cargo_entry.delete(0, tk.END)
    status_funcionario_combobox.set("")

# Criando a interface gráfica
try:
    root = tk.Tk()

    # Adiciona uma linha em branco antes do título
    tk.Label(root, text="").pack()  # Linha em branco

    root.title("Auto Posto Trevão - Cadastro de Funcionários")
    root.geometry("500x900")

    # Labels e Campos de Entrada
    tk.Label(root, text="CPF:").pack()
    cpf_entry = tk.Entry(root)
    cpf_entry.pack()

    tk.Label(root, text="Nome:").pack()
    nome_entry = tk.Entry(root)
    nome_entry.pack()

    tk.Label(root, text="Data de Nascimento (YYYY-MM-DD):").pack()
    data_nascimento_entry = tk.Entry(root)
    data_nascimento_entry.pack()

    tk.Label(root, text="Logradouro:").pack()
    logradouro_entry = tk.Entry(root)
    logradouro_entry.pack()

    tk.Label(root, text="Bairro:").pack()
    bairro_entry = tk.Entry(root)
    bairro_entry.pack()

    tk.Label(root, text="Cidade:").pack()
    cidade_entry = tk.Entry(root)
    cidade_entry.pack()

    tk.Label(root, text="Estado:").pack()
    estado_entry = tk.Entry(root)
    estado_entry.pack()

    tk.Label(root, text="CEP:").pack()
    cep_entry = tk.Entry(root)
    cep_entry.pack()

    tk.Label(root, text="Departamento/Setor:").pack()
    departamento_setor_entry = tk.Entry(root)
    departamento_setor_entry.pack()

    tk.Label(root, text="Telefone de Contato:").pack()
    telefone_contato_entry = tk.Entry(root)
    telefone_contato_entry.pack()

    tk.Label(root, text="E-mail:").pack()
    email_entry = tk.Entry(root)
    email_entry.pack()

    tk.Label(root, text="Salário:").pack()
    salario_entry = tk.Entry(root)
    salario_entry.pack()

    tk.Label(root, text="Benefícios (separados por vírgula):").pack()
    beneficios_entry = tk.Entry(root)
    beneficios_entry.pack()

    tk.Label(root, text="Cargo:").pack()
    cargo_entry = tk.Entry(root)
    cargo_entry.pack()

    tk.Label(root, text="Status do Funcionário:").pack()
    status_funcionario_combobox = ttk.Combobox(root, values=["Ativo", "Inativo"])
    status_funcionario_combobox.pack()

    # Adiciona duas linhas em branco
    tk.Label(root, text="").pack()  # Primeira linha em branco

    # Botão para salvar os dados
    tk.Button(root, text="Salvar Funcionário", command=salvar_dados_funcionario).pack()

    # Inicia o loop principal da interface gráfica
    root.mainloop()

except Exception as e:
    print(f"Ocorreu um erro ao iniciar a interface gráfica: {e}")


- LEITURA DO BANCO DE DADOS DOS FUNCINÁRIOS:

from pymongo import MongoClient

# Conectar ao MongoDB
client = MongoClient("mongodb://localhost:27017/")  # Conexão local

# Acessar o banco de dados 'empresa' e a coleção 'funcionarios'
db = client['empresa']
colecao = db['funcionarios']

# Encontrar todos os registros da coleção
registros = colecao.find()

# Exibir os dados encontrados
for registro in registros:
    print(registro)
